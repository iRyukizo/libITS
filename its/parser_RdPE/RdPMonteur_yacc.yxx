/****************************************************************************/
/*								            */
/* This file is part of the PNDDD, Petri Net Data Decision Diagram  package.*/
/*     						                            */
/*     Copyright (C) 2004, 2009 Denis Poitrenaud and Yann Thierry-Mieg            */
/*     						                            */
/*     This program is free software; you can redistribute it and/or modify */
/*     it under the terms of the GNU General Public License as published by */
/*     the Free Software Foundation; either version 2 of the License, or    */
/*     (at your option) any later version.                                  */
/*     This program is distributed in the hope that it will be useful,      */
/*     but WITHOUT ANY WARRANTY; without even the implied warranty of       */
/*     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        */
/*     GNU General Public License for more details.                         */
/*     						                            */
/*     You should have received a copy of the GNU General Public License    */
/*     along with this program; if not, write to the Free Software          */
/*Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA */
/*     						                            */
/****************************************************************************/



%{

/* .......... Declarations C ........*/

  //#include <stdio.h>
#include <string>
using namespace std;
  //#include <iostream>
#include <stdio.h>
#include "its/parser_RdPE/RdPMonteur.h"

#pragma GCC diagnostic ignored "-Wconversion"

static	RdPMonteur *R;
static  string t;

extern int yylex();
extern int RdPMlineno;
extern	FILE *RdPMin;
extern char rdptext[];

extern void RdPMerror (const char *s) {
	cerr << "Parse error :" << s  << endl ;
	cerr << "While parsing .net model file at line :" << RdPMlineno <<endl;
	cerr << "Please be aware this may have unknowable effects on your analysis." << endl;
	cerr << "attempting error ignore" << endl;
}

/*........... Code C additionnel ....*/
/*   // ************* ?????? WTF ?? yann
extern "C" {
  int yylex();
  int yyerror(const char* s){
    if (s)
      printf("Error : %s\n", s);
    else
      printf("Parsing error\n");
    return (1);
  }

  int yywrap(){
    return (1);
  }
}
*/

%}

/*........... Declarations Yacc .....*/
%union {
  int i;
  char *s;
}

%error-verbose

%token IN OUT MK CP PLACE QUEUE TRANS ENDTR TOKEN RESET LOSS INHIBITOR STAR
%token <i> ENTIER
%token <s> VARIABLE

%type <i> marquage
%type <i> placelevel

%name-prefix="RdPM"

%start reseau

%%
/*........... Regles de grammaire ...*/

	/*********************/
	/* lecture du reseau */
	/*********************/

reseau	        : noeud | reseau noeud
		;

noeud		: place | queue | transition
		;

 	/***********************/
	/* lecture d'une place */
	/***********************/

placelevel      : PLACE '(' ENTIER ')'
                {
		  $$ = $3;
		}
                | PLACE
                {
		  $$ = 0;
		}
                ;
place		: placelevel VARIABLE
		{
		  if(!R->addPlace($2,0,0,$1))
		  {
		    yyerror("creation de place");return(1);
		  }
		  free($2);
		}
                | placelevel VARIABLE MK '(' marquage ')'
		{
		  if(!R->addPlace($2,$5,0,$1))
		  {
		    yyerror("creation de place marquee");return(1);
		  }
                  free($2);
		}
                | placelevel VARIABLE CP '(' ENTIER ')'
		{
		  if(!R->addPlace($2,0,$5,$1))
		  {
		    yyerror("creation de place a capacite");return(1);
		  }
                  free($2);
		}
                | placelevel VARIABLE MK '(' marquage ')' CP '(' ENTIER ')'
		{
		  if(!R->addPlace($2,$5,$9,$1))
		  {
		    yyerror("creation de place marquee a capacite");return(1);
		  }
                  free($2);
		}
                | placelevel VARIABLE CP '(' ENTIER ')' MK '(' marquage ')'
		{
		  if(!R->addPlace($2,$9,$5,$1))
		  {
		    yyerror("creation de place marquee a capacite");return(1);
		  }
		  free($2);
		}
		;

 	/***********************/
	/* lecture d'une queue */
	/***********************/

queue		: QUEUE VARIABLE
		{
		  if(!R->addQueue($2))
		  {
		    yyerror("creation d'une file");return(1);
		  }
		  free($2);
		}
        | QUEUE VARIABLE CP '(' ENTIER ')'
		{
		  if(!R->addQueue($2,$5))
		  {
		    yyerror("creation d'une file a capacite");return(1);
		  }
		  free($2);

		}
        | QUEUE VARIABLE LOSS
		{
		  if(!R->addLossQueue($2))
		  {
		    yyerror("creation d'une file a perte");return(1);
		  }
		  free($2);

		}
        | QUEUE VARIABLE LOSS CP '(' ENTIER ')'
		{
		  if(!R->addLossQueue($2,$6))
		  {
		    yyerror("creation d'une file a capacite et a perte");return(1);
		  }
		  free($2);

		}
        | QUEUE VARIABLE CP '(' ENTIER ')' LOSS
		{
		  if(!R->addLossQueue($2,$5))
		  {
		    yyerror("creation d'une file a capacite et a perte");return(1);
		  }
		  free($2);

		}
		;
	/***********************/
	/* lecture d'une trans */
	/***********************/

nomtransition   : TRANS VARIABLE
                {
		  if(!R->addTrans($2))
		  {
		    yyerror("creation d'une transition");return(1);
		  }
		  t=$2;
		  free($2);

		}
                ;

transition	: nomtransition entree sortie ENDTR
		;
	/***************************************/
	/* lecture des entrees d'une transition*/
	/***************************************/

entree		: IN '{' listearcin '}'
		|
		;
	/***************************************/
	/* lecture des sorties d'une transition*/
	/***************************************/

sortie		: OUT '{' listearcout '}'
		|
		;

	/***************************************/
	/* lecture d'un arc			*/
	/***************************************/

listearcin	: listearcin VARIABLE ':' marquage ';'
		{
		  if(!R->addPre($2,t,$4))
		  {
		    yyerror("creation d'un arc (place) d'entree");return(1);
		   }
		  free($2);

		}
		| listearcin VARIABLE ':' '[' ENTIER ']' ';'
		{
		  if(!R->addPreQueue($2,t,$5))
		  {
		    yyerror("creation d'un arc (file) d'entree");return(1);
		   }
		  free($2);

		}
		| listearcin VARIABLE ':' RESET ';'
		{
		  if(!R->addReset($2,t))
		  {
		    yyerror("creation d'un arc reset");return(1);
		   }
		  free($2);

		}
		| listearcin VARIABLE INHIBITOR ENTIER ';'
		{
		  if(!R->addInhibitor($2,t,$4))
		  {
		    yyerror("creation d'un arc inhibiteur");return(1);
		   }
		  free($2);

		}
		| listearcin VARIABLE ':' VARIABLE ';'
		{
		  if(!R->addPreAuto($2,t,$4))
		  {
		    yyerror("creation d'un arc d'entree auto-modifiant");return(1);
		   }
		  free($2);

		}
		|
		;

listearcout	: listearcout VARIABLE ':' marquage ';'
		{
		  if(!R->addPost($2,t,$4))
		  {
		    yyerror("creation d'un arc (place) de sortie");return(1);
		  }
		  free($2);

		}
		| listearcout VARIABLE ':' '[' ENTIER ']' ';'
		{
		  if(!R->addPostQueue($2,t,$5))
		  {
		    yyerror("creation d'un arc (file) de sortie");return(1);
		   }
		  free($2);

		}
		| listearcout VARIABLE ':' VARIABLE ';'
		{
		  if(!R->addPostAuto($2,t,$4))
		  {
		    yyerror("creation d'un arc de sortie auto-modifiant");return(1);
		  }
		  free($2);
		  free($4);

		}
		|
		;

marquage	: TOKEN {$$=1;}
		| ENTIER TOKEN {$$=$1;}
		| ENTIER STAR TOKEN {$$=$1;}
		;
%%

bool RdPMonteur::create(const char *f){
  int i;
  if ((RdPMin=fopen(f,"r"))==NULL)
    return false;
  R=this;
  i=(int) yyparse();
  fclose(RdPMin);
  return (i==0);
}
